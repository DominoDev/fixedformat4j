{"name":"Fixedformat4j","tagline":"Fixedformat4j is an easy to use Java framework for working with flat fixed formatted text files. By annotating your code you can setup the offsets and format as for your data when reading/writing to and from flat fixed format files","body":"### Fixedformat4j\r\n\r\nFixedformat4j is an easy to use Java framework for working with flat fixed formatted text files. By annotating your code you can setup the offsets and format as for your data when reading/writing to and from flat fixed format files.\r\n\r\nFixedformat4j handles the following build in datatypes:\r\n\r\n* String\r\n* Character / char\r\n* Long / long\r\n* Integer / int\r\n* Double / double\r\n* Float /float\r\n* Boolean / boolean\r\n* Date\r\n* BigDecimal\r\n\r\nAt the same time it is straight forward to write and plugin your own formatters for custom datatypes.\r\n\r\n### Getting started\r\n\r\nTo start using Fixedformat4j you only have to annotate your getter methods and use the FixedFormatManager to load and export your fixedformat text according to your annotation instructions.\r\n\r\nA sample can be seen here:\r\n\r\n```\r\n@Record\r\npublic class BasicRecord {\r\n\r\n  private String stringData;\r\n  private Integer integerData;\r\n  private Date dateData;\r\n\r\n\r\n  @Field(offset = 1, length = 10)\r\n  public String getStringData() {\r\n    return stringData;\r\n  }\r\n\r\n  public void setStringData(String stringData) {\r\n    this.stringData = stringData;\r\n  }\r\n\r\n  @Field(offset = 11, length = 5, align = Align.RIGHT, paddingChar = '0')\r\n  public Integer getIntegerData() {\r\n    return integerData;\r\n  }\r\n\r\n  public void setIntegerData(Integer integerData) {\r\n    this.integerData = integerData;\r\n  }\r\n\r\n  @Field(offset = 16, length = 10)\r\n  @FixedFormatPattern(\"yyyy-MM-dd\")\r\n  public Date getDateData() {\r\n    return dateData;\r\n  }\r\n\r\n  public void setDateData(Date dateData) {\r\n    this.dateData = dateData;\r\n  }\r\n}\r\n```\r\n\r\nThis annotated class can now be loaded and exported using a FixedFormatManager\r\n\r\n```\r\npublic class BasicUsage {\r\n\r\n  private static FixedFormatManager manager = new FixedFormatManagerImpl();\r\n\r\n  public static void main(String[] args) {\r\n    String string = \"string    001232008-05-29\";\r\n    BasicRecord record = manager.load(BasicRecord.class, string);\r\n    System.out.println(\"The parsed string: \" + record.getStringData());\r\n    System.out.println(\"The parsed integer: \" + record.getIntegerData());\r\n    System.out.println(\"The parsed date: \" + record.getDateData());\r\n    record.setIntegerData(100);\r\n    System.out.println(\"Exported: \" + manager.export(record));\r\n  }\r\n}\r\n```\r\n\r\nRunning this simple program will generate the following output.\r\n\r\nNote that the integer changed value in the exported string.\r\n\r\n> The parsed string: string\r\n> The parsed integer: 123\r\n> The parsed date: Thu May 29 00:00:00 CEST 2008\r\n> Exported: string    001002008-05-29\r\n\r\n### Authors and Contributors\r\nFixedformat4j was originally started by Jacob von Eyben (@jeyben). Per Olsen (@polesen) has contributed several times. ","google":"UA-1865749-10","note":"Don't delete this file! It's used internally to help with page regeneration."}